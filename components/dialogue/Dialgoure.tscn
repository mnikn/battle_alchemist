[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/gui/dialogue/dialogue.png" type="Texture" id=1]
[ext_resource path="res://assets/fonts/ipix.ttf" type="DynamicFontData" id=3]

[sub_resource type="DynamicFont" id=1]
font_data = ExtResource( 3 )

[sub_resource type="Theme" id=2]
default_font = SubResource( 1 )

[sub_resource type="StyleBoxTexture" id=3]
texture = ExtResource( 1 )
region_rect = Rect2( 0, 0, 320, 90 )

[sub_resource type="GDScript" id=5]
script/source = "extends PopupDialog

signal sentence_all_visible(sentence)
signal sentence_confirmed(sentence)
signal dialogue_finished(last_sentence)
signal branch_selected(branch_id)
signal combat_finished()

onready var Content = $Layout/MarginContainer/Layout/Layout/Content
onready var Indictor = $Layout/Indictor
onready var PortraitContainer = $Layout/MarginContainer/Layout/PortraitContainer
onready var Portrait = $Layout/MarginContainer/Layout/PortraitContainer/MarginContainer/Portrait
onready var Actor = $Layout/MarginContainer/Layout/Layout/Actor
onready var Options = $Layout/MarginContainer/Layout/Layout/Options
var OptionButtonScene = preload(\"./OptionButton.tscn\")

const text_speed = 0.02
const skip_text_speed = 0.2
var current_dialogue_item
var enabled = true setget set_enabled

func show_dialogue(dialogue, data = {}):
	self.popup(Rect2(self.rect_position, self.rect_size))
	$Logic.process_dialogue(dialogue, data)
	var last_sentence = yield($Logic, \"dialogue_finished\")
	self.emit_signal(\"dialogue_finished\", last_sentence)
	self.queue_free()

func set_enabled(value):
	self.set_process_input(value)
	if value:
		self.show()
	else:
		self.hide()

func _input(event):
	if !enabled or self.current_dialogue_item == null or self.current_dialogue_item.type == \"branch\":
		return
	if event.is_action_pressed(\"ui_accept\") and self.Content.percent_visible == 1:
		self.emit_signal(\"sentence_confirmed\", self.current_dialogue_item)
	elif event.is_action_pressed(\"ui_accept\") and self.Content.percent_visible != 1:
		self.Content.percent_visible = 1
		self.emit_signal(\"sentence_all_visible\")

func _on_Logic_show_sentence(sentence, data):
	self.current_dialogue_item = sentence
	self.Indictor.visible = false
	$AnimationPlayer.stop(true)
	self.Actor.visible = false
	self.PortraitContainer.visible = false
	for item in self.Options.get_children():
		self.Options.remove_child(item)
	self.Content.visible = true

	var content = sentence.content
	for key in data:
		content = content.replace(\"{{\" + key + \"}}\", data[key])
	self.Content.bbcode_text = content
	self.Content.percent_visible = 0

	$Timer.start()
	yield(self, \"sentence_all_visible\")
	yield(self, \"sentence_confirmed\")
	$Logic.emit_signal(\"sentence_finished\")

func _on_Logic_show_branch(branch, data) -> void:
	self.current_dialogue_item = branch
	self.Indictor.visible = false
	$AnimationPlayer.stop(true)
	self.Actor.visible = false
	self.PortraitContainer.visible = false
	NodeUtils.remove_children(self.Options)

	self.Content.visible = true
	var content = branch.content
	for key in data:
		content.replace(\"{{\" + key + \"}}\", data[key])
	self.Content.bbcode_text = content
	self.Content.percent_visible = 0

	$Timer.start()
	yield(self, \"sentence_all_visible\")
	for option in branch.options:
		var node = OptionButtonScene.instance()
		node.text = option.content
		if option.has(\"disabled\") and option.disabled:
			node.disabled = true
		node.connect(\"pressed\", self, \"_option_button_pressed\", [option])
		self.Options.add_child(node)
	self.Options.get_children()[0].grab_focus()
#
func _option_button_pressed(option):
	$Logic.emit_signal(\"branch_selected\", option)
	self.emit_signal(\"branch_selected\", option.id)

func _on_Timer_timeout():
	if Input.get_action_strength(\"skip_dialogue\") and !(self.current_dialogue_item.type == \"branch\"):
		self.Content.percent_visible = max(self.Content.percent_visible, self.Content.percent_visible + skip_text_speed)
	else:
		self.Content.percent_visible = max(self.Content.percent_visible, self.Content.percent_visible + text_speed)
	if self.Content.percent_visible == 1 or len(self.current_dialogue_item.content) == 0:
		if len(self.current_dialogue_item.content) == 0:
			yield(self.get_tree().create_timer(0.1), \"timeout\")
		$Timer.stop()
		if !(self.current_dialogue_item.type == \"branch\"):
			self.Indictor.visible = true
			$AnimationPlayer.play(\"show_indictor\")
		self.emit_signal(\"sentence_all_visible\")
	else:
		$Timer.start()
"

[sub_resource type="Animation" id=4]
resource_name = "completed"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:anchor_bottom")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.9, 0.94 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:anchor_top")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.9, 0.94 ]
}

[node name="Dialogue" type="PopupDialog"]
visible = true
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
margin_left = -480.0
margin_top = -200.0
margin_right = 480.0
margin_bottom = -8.0
rect_min_size = Vector2( 960, 192 )
theme = SubResource( 2 )
custom_styles/panel = SubResource( 3 )
popup_exclusive = true
script = SubResource( 5 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Content" type="RichTextLabel" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 80.0
margin_top = 56.0
margin_right = -32.0
margin_bottom = 16.0
bbcode_enabled = true
bbcode_text = "测试内容"
text = "测试内容"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Tween" type="Tween" parent="Content"]

[node name="Actor" type="Label" parent="."]
margin_left = 80.0
margin_top = 24.0
margin_right = 119.0
margin_bottom = 41.0
rect_min_size = Vector2( 0, 12 )
text = "XXX"
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Choices" type="VBoxContainer" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
rect_min_size = Vector2( 0, 40 )
size_flags_horizontal = 12
size_flags_vertical = 12
alignment = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Indictor" type="TextureRect" parent="."]
anchor_left = 0.5
anchor_top = 0.9
anchor_right = 0.5
anchor_bottom = 0.9
margin_left = -8.0
margin_top = -13.486
margin_right = 3.0
margin_bottom = -4.48592
rect_scale = Vector2( 2, 2 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="AnimationPlayer" type="AnimationPlayer" parent="Indictor"]
anims/completed = SubResource( 4 )

[node name="Portrait" type="Sprite" parent="."]
position = Vector2( 40, 48 )

[node name="Timer" type="Timer" parent="."]
wait_time = 0.01

[connection signal="tween_all_completed" from="Content/Tween" to="." method="_on_Tween_tween_all_completed"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
